// Copyright 2015-2019 Kerbas_ad_astra
//
// This file is part of CommNet Relays.
//
// CommNet Relays is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CommNet Relays is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CommNet Relays.  If not, see <http://www.gnu.org/licenses/>.

CONTRACT_TYPE
{
	name = CommNetRelayCoMoon
	
	title = #autoLOC_CNR_CoMoon_title // Place a relay satellite in orbit around @/targetBody1
	genericTitle = #autoLOC_CNR_CoMoon_title_gen // Place a relay satellite in orbit around the homeworld's co-moon.
	
	group = CommNetRelays
	
	sortKey = 7
	
	description = #autoLOC_CNR_CoMoon_desc // To support later exploration missions to @/targetBody1, we want to establish a communication network of satellites around it.  This will allow later missions to communicate with @/homeworld, even when on the far side of @/targetBody1.
	genericDescription = #autoLOC_CNR_CoMoon_desc_gen // To support later exploration missions to our co-moon(s), we want to establish a communication network of satellites around it.  This will allow later missions to communicate with our homeworld, even when on the far side of its co-moon(s).
	
	synopsis = #autoLOC_CNR_CoMoon_syn // Place an uncrewed communications relay in orbit around @/targetBody1.
	
	completedMessage = #autoLOC_CNR_CoMoon_comp // The relay is in position.  Now later missions to @/targetBody1 can use it when they can't see @/homeworld!
	
	targetBody = @/targetBody1
	
	maxSimultaneous = 2
	
	rewardScience = 0
	rewardReputation = 15
	rewardFunds = 10000.0
	//This contract doesn't expire, but it can be declined (can't imagine why you would, since it's free money), so we need to define failure costs.
	failureReputation = 10
	failureFunds = 25000.0
	advanceFunds = 20000.0
	
	PARAMETER
	{
		name = NewVessel
		type = NewVessel
	}
	
	DATA
	{
		type = CelestialBody
		homeworld = HomeWorld()
	}
	
	DATA
	{
		type = double
		maxApoapsis = 1100000 // much further than this and a whip antenna on the Mun won't be able to connect to the HG-5 while just below the horizon.
		minRelayPower = 5000000 // HG-5 or equivalent
	}
	
	//Here's the control logic: the body has to be a co-moon of the homeworld, and it must have fewer than 5 ships orbiting it (4 is the minimum to establish coverage, so let's give one more for redundancy, and if you have 5 ships, you probably have 5 antennas).
	
	DATA
	{
		type = List<CelestialBody>
		validBodies = HomeWorld().Parent().Children().Where(p => !p.IsHomeWorld())
	}
	DATA
	{
		type = List<Vessel>
		hidden = true
		requiredValue = false
		bodyVessels = AllVessels().Where(v => @validBodies.Contains(v.CelestialBody()))
		orbitingVessels = @bodyVessels.Where(v => v.IsOrbiting())
		validVessels = @orbitingVessels.Where(v => v.Orbit().Apoapsis() < @/maxApoapsis)
		validRelays = @validVessels.Where(v => v.AntennaRelayPower() >= @/minRelayPower)
	}
	DATA
	{
		type = CelestialBody
		title = #autoLOC_CNR_CoMoon_cb_title // Fewer than five relays orbiting the co-moon(s)
		targetBody1 = @validBodies.Where(b => (@validRelays.Where(v => (v.CelestialBody() == b)).Count() < 5)).Random()
		uniquenessCheck = CONTRACT_ACTIVE
	}
	
	PARAMETER
	{
		name = Orbit
		type = Orbit
		targetBody = @/targetBody1
		maxApA = @/maxApoapsis 
		notes = #autoLOC_CNR_CoMoon_notes_orbit // Most of the orbit details are intentionally left open, but an inclined and elliptical orbit will give the best uptime, with the shortest periods of being "eclipsed" by @/targetBody1.
	}
	
	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		minCrew = 0
		maxCrew = 0
	}
	
	PARAMETER
	{
		name = HasAntenna
		type = HasAntenna
		minAntennaPower = @/minRelayPower
		antennaType = RELAY
		notes = #autoLOC_CNR_CoMoon_notes_antenna // Don't forget to extend antennas that need extending!
	}
	
	REQUIREMENT
	{
		name = ReachSpace
		type = ReachSpace
	}
	
	REQUIREMENT
	{
		name = Facility
		type = Facility
		facility = TrackingStation
		minLevel = 1
		checkOnActiveContract = false
	}
	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		title = #autoLOC_CNR_CoMoon_req // The homeworld must be a moon
		expression = HomeWorld().IsMoon()
	}
}