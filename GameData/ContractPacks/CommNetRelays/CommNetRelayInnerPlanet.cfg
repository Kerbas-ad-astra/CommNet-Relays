// Copyright 2015-2019 Kerbas_ad_astra
//
// This file is part of CommNet Relays.
//
// CommNet Relays is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CommNet Relays is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CommNet Relays.  If not, see <http://www.gnu.org/licenses/>.

CONTRACT_TYPE
{
	name = CommNetRelayInnerPlanet
	
	title = #autoLOC_CNR_InnerPlanet_title // Place a relay satellite in orbit around @/targetBody1
	genericTitle = #autoLOC_CNR_InnerPlanet_title_gen // Place a relay satellite in orbit around the inner planets and moons
	
	group = CommNetRelays
	
	sortKey = 2
	
	description = #autoLOC_CNR_InnerPlanet_desc // To support later exploration missions to @/targetBody1, we want to establish a communication network of satellites with enough transmitter power to reach all the way back to @/homeworld.  This will allow later missions to use smaller, less power-hungry antennas.  Since we've upgraded the tracking station, an RA-15 should do the trick for @/targetBody1.
	genericDescription = #autoLOC_CNR_InnerPlanet_desc_gen // To support later exploration missions to the inner planets and moons, we want to establish a communication network of satellites with enough transmitter power to reach all the way back to our homeworld.  This will allow later missions to use smaller, less power-hungry antennas.  Since we've upgraded the tracking station, an RA-15 should do the trick for the inner planets and moons.
	
	synopsis = #autoLOC_CNR_InnerPlanet_syn // Place an uncrewed communications relay in orbit around @/targetBody1.
	
	completedMessage = #autoLOC_CNR_InnerPlanet_comp // The relay is in position.  Now later missions to @/targetBody1 can use it instead of having to transmit all the way to @/homeworld!
	
	targetBody = @/targetBody1
	
	maxSimultaneous = 3
	
	rewardScience = 0
	rewardReputation = 30
	rewardFunds = 20000.0
	//This contract doesn't expire, but it can be declined (can't imagine why you would, since it's free money), so we need to define failure costs.
	failureReputation = 20
	failureFunds = 50000.0
	advanceFunds = 40000.0
	
	PARAMETER
	{
		name = NewVessel
		type = NewVessel
	}
	
	DATA
	{
		type = CelestialBody
		homeworld = HomeWorld()
	}
	
	DATA
	{
		type = double
		maxApoapsis = 6400000 //Too much higher, and built-in antennas won't be able to reach it.
		minRelayPower = 15000000000 // RA-15 or equivalent
	}
	
	//Here's the control logic: the body has to be a planet or moon (i.e. not a star) in the inner solar system (i.e. semi-major axis < 1.6x homeworld's), it must have fewer than 5 relays orbiting it (4 is the minimum to establish coverage, so let's give one more for redundancy), and it cannot be the homeworld or one of the homeworld's children or parent (since the homeworld doesn't need a "network" and the homeworld's children and parents fall under a separate contract).
	
	DATA
	{
		type = List<CelestialBody>
		validBodies = AllBodies().Where(b =>  (  ((b.IsPlanet() && (b.SemiMajorAxis() < 1.6 * HomeWorld().SemiMajorAxis())) || (b.IsMoon() && (b.Parent().SemiMajorAxis() < 1.6 * HomeWorld().SemiMajorAxis() ) )) && !(b.IsHomeWorld() || b.Parent().IsHomeWorld() ) )   )
	}
	DATA
	{
		type = List<Vessel>
		hidden = true
		requiredValue = false
		bodyVessels = AllVessels().Where(v => @validBodies.Contains(v.CelestialBody()))
		orbitingVessels = @bodyVessels.Where(v => v.IsOrbiting())
		validVessels = @orbitingVessels.Where(v => v.Orbit().Apoapsis() < @/maxApoapsis)
		validRelays = @validVessels.Where(v => v.AntennaRelayPower() >= @/minRelayPower)
	}
	DATA
	{
		type = CelestialBody
		title = #autoLOC_CNR_InnerPlanet_cb_title // Fewer than five relays orbiting the body
		targetBody1 = @validBodies.Where(b => (@validRelays.Where(v => (v.CelestialBody() == b)).Count() < 5)).Random()
		uniquenessCheck = CONTRACT_ACTIVE
	}
	
	PARAMETER
	{
		name = Orbit
		type = Orbit
		maxApA = @/maxApoapsis
		notes = #autoLOC_CNR_InnerPlanet_notes_orbit // Most of the orbit details are intentionally left open, but an inclined and elliptical orbit will give the best uptime, with the shortest periods of being "eclipsed" by the body.
	}
	
	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		minCrew = 0
		maxCrew = 0
	}
	
	PARAMETER
	{
		name = HasAntenna
		type = HasAntenna
		minAntennaPower = @/minRelayPower
		antennaType = RELAY
		notes = #autoLOC_CNR_InnerPlanet_notes_antenna // Don't forget to extend antennas that need extending!
	}
	
	REQUIREMENT
	{
		name = Escape
		type = Escape
		targetBody = @/homeworld
	}
	
	REQUIREMENT
	{
		name = Facility
		type = Facility
		facility = TrackingStation
		minLevel = 1
		checkOnActiveContract = false
	}
}