// Copyright 2015-2019 Kerbas_ad_astra
//
// This file is part of CommNet Relays.
//
// CommNet Relays is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CommNet Relays is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CommNet Relays.  If not, see <http://www.gnu.org/licenses/>.

CONTRACT_TYPE
{
	name = CommNetRelayOuterPlanetHighOrbit
	
	title = #autoLOC_CNR_OuterPlanetHigh_title // Place a relay satellite in high orbit around @/targetBody1
	genericTitle = #autoLOC_CNR_OuterPlanetHigh_title_gen // Place a relay satellite in high orbit around the gas giants
	
	group = CommNetRelays
	
	sortKey = 5
	
	description = #autoLOC_CNR_OuterPlanetHigh_desc // Our communication network around @/targetBody1 is being hampered by @/targetBody1 itself -- it keeps getting between us and the relays.  To improve availability, we want you to put a relay in a highly-inclined and highly-eccentric orbit around @/targetBody1.
	genericDescription = #autoLOC_CNR_OuterPlanetHigh_desc_gen // Our communication networks around the gas giants is being hampered by the gas giants themselves -- they keeps getting between us and the relays.  To improve availability, we want you to put a relay in a highly-inclined and highly-eccentric orbit around the gas giants.
	
	synopsis = #autoLOC_CNR_OuterPlanetHigh_syn // Place a communications relay in a highly-inclined and highly-eccentric orbit around @/targetBody1.
	
	completedMessage = #autoLOC_CNR_OuterPlanetHigh_comp // The relay is in position.  Now our missions to @/targetBody1 will have better communication availability!
	
	targetBody = @/targetBody1
	
	maxSimultaneous = 2
	
	rewardScience = 0
	rewardReputation = 30
	rewardFunds = 20000.0
	//This contract doesn't expire, but it can be declined (can't imagine why you would, since it's free money), so we need to define failure costs.
	failureReputation = 20
	failureFunds = 50000.0
	advanceFunds = 40000.0
	
	PARAMETER
	{
		name = NewVessel
		type = NewVessel
	}
	
	DATA
	{
		type = CelestialBody
		homeworld = HomeWorld()
	}
	
	DATA
	{
		type = double
		minApoapsis = 20000000 //About 3 Jool radii, plenty of dwell time to see over Jool
		minRelayPower = 100000000000 // RA-100 or equivalent
	}
	
	//Here's the control logic: the body has to be a gas giant (i.e. big enough that it gets in the way of relatively low-orbiting whip-reachable relays) and it must have fewer than 2 ships orbiting it at "high" altitude.
	
	DATA
	{
		type = List<CelestialBody>
		validBodies = AllBodies().Where(b =>  (b.IsPlanet() && !b.HasSurface())   )
	}
	DATA
	{
		type = List<Vessel>
		hidden = true
		requiredValue = false
		bodyVessels = AllVessels().Where(v => @validBodies.Contains(v.CelestialBody()))
		orbitingVessels = @bodyVessels.Where(v => v.IsOrbiting())
		validVessels = @orbitingVessels.Where(v => v.Orbit().Apoapsis() > @/minApoapsis)
		validRelays = @validVessels.Where(v => v.AntennaRelayPower() >= @/minRelayPower)
	}
	DATA
	{
		type = CelestialBody
		title = #autoLOC_CNR_OuterPlanetHigh_cb_title // Fewer than two relays orbiting the body in high orbits
		targetBody1 = @validBodies.Where(b => (@validRelays.Where(v => (v.CelestialBody() == b)).Count() < 2)).Random()
		uniquenessCheck = CONTRACT_ACTIVE
	}
	
	PARAMETER
	{
		name = Orbit
		type = Orbit
		
		minApA = @/minApoapsis
		minInclination = 45
		minEccentricity = 0.4
		notes = #autoLOC_CNR_OuterPlanetHigh_notes_orbit // Try to get the apoapsis as far out of the plane as possible (i.e. argument of periapsis = +/- 90 degrees) and the periapsis as close to the planet as possible for maximum availability.
	}
	
	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		minCrew = 0
		maxCrew = 0
	}
	
	PARAMETER
	{
		name = HasAntenna
		type = HasAntenna
		minAntennaPower = @/minRelayPower
		antennaType = RELAY
		notes = #autoLOC_CNR_OuterPlanetHigh_notes_antenna // Don't forget to extend antennas that need extending!
	}
	
	REQUIREMENT
	{
		name = Orbit
		type = Orbit
		targetBody = @/targetBody1
	}
	
	REQUIREMENT
	{
		name = Facility
		type = Facility
		facility = TrackingStation
		minLevel = 2
		checkOnActiveContract = false
	}
}