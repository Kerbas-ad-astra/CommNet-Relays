// Copyright 2015-2019 Kerbas_ad_astra
//
// This file is part of CommNet Relays.
//
// CommNet Relays is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// CommNet Relays is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with CommNet Relays.  If not, see <http://www.gnu.org/licenses/>.

CONTRACT_TYPE
{
	name = CommNetRelayHomeworldParentLagrange
	
	title = #autoLOC_CNR_ParentLagrange_title // Place a relay satellite in orbit around @/targetBody1 ahead of or behind @/homeworldParent
	genericTitle = #autoLOC_CNR_ParentLagrange_title_gen // Place a relay satellite in orbit around our homeworld's grandparent ahead of or behind our homeworld's parent.
	
	group = CommNetRelays
	
	sortKey = 8
	
	description = #autoLOC_CNR_ParentLagrange_desc // Sometimes, planets are on the opposite side of @/targetBody1 from us for several days.  To improve availability, we want you to put a relay in an orbit similar to @/homeworldParent's, but "ahead of" or "behind" it, so that the relay can see around @/targetBody1 and keep us connected.  Be sure to use lots of antennas, since it may have to reach all the way to the edge of the solar system.
	genericDescription = #autoLOC_CNR_ParentLagrange_desc_gen // Sometimes, planets are on the opposite side of our homeworld's grandparent from us for several days.  To improve availability, we want you to put a relay in an orbit similar to our homeworld's parent, but "ahead of" or "behind" it, so that the relay can see around our homeworld's parent and keep us connected.  Be sure to use lots of antennas, since it may have to reach all the way to the edge of the solar system.
	
	synopsis = #autoLOC_CNR_ParentLagrange_syn // Place a communications relay in orbit ahead of or behind @/homeworldParent around @/targetBody1.
	
	completedMessage = #autoLOC_CNR_ParentLagrange_comp // The relay is in position.  Now @/targetBody1 won't get in our way!
	
	targetBody = @/targetBody1
	
	maxSimultaneous = 1
	maxCompletions = 2
	
	rewardScience = 0
	rewardReputation = 30
	rewardFunds = 200000.0
	//This contract doesn't expire, but it can be declined (can't imagine why you would, since it's free money), so we need to define failure costs.
	failureReputation = 20
	failureFunds = 500000.0
	//Needs a lot of spesos up front to get a zillion RA-100s, assuming e.g. DMOS is not installed.
	advanceFunds = 400000.0
	
	PARAMETER
	{
		name = NewVessel
		type = NewVessel
	}
	
	DATA
	{
		type = CelestialBody
		homeworldParent = HomeWorld().Parent()
	}
	
	DATA
	{
		type = CelestialBody
		targetBody1 = HomeWorld().Parent().Parent()
	}
	
	DATA
	{
		type = double
		minRelayPower = 900000000000 // Equivalent of 9x RA-100's.  (Actually 19, because of the exponent.)
	}
	
	PARAMETER
	{
		name = Orbit
		type = Orbit
		
		minApA = HomeWorld().Parent().SemiMajorAxis()*0.9
		maxApA = HomeWorld().Parent().SemiMajorAxis()*1.1
		
		minPeA = HomeWorld().Parent().SemiMajorAxis()*0.9
		maxPeA = HomeWorld().Parent().SemiMajorAxis()*1.1
		
		notes = #autoLOC_CNR_ParentLagrange_notes_orbit // Try to get as close as possible to @/homeworldParent's orbital period, and between 60 and 120 degrees ahead or behind.
	}
	
	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		minCrew = 0
		maxCrew = 0
	}
	
	PARAMETER
	{
		name = HasAntenna
		type = HasAntenna
		minAntennaPower = @/minRelayPower
		antennaType = RELAY
		notes = #autoLOC_CNR_ParentLagrange_notes_antenna // Multiple antennas may be required.  Don't forget to extend antennas that need extending!
	}
	
	REQUIREMENT
	{
		name = Orbit
		type = Orbit
		targetBody = @/targetBody1
	}
	
	REQUIREMENT
	{
		name = Facility
		type = Facility
		facility = TrackingStation
		minLevel = 2
		checkOnActiveContract = false
	}
	
	REQUIREMENT
	{
		name = Expression
		type = Expression
		title = #autoLOC_CNR_ParentLagrange_req // The homeworld must be a moon
		expression = HomeWorld().IsMoon()
	}
}